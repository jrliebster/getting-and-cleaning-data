count(ComprehensiveHiring2016, c("RRPrimarySubject8", "District"))
summary(District)
summary(ComprehensiveHiring2016$District)
head(ComprehensiveHiring2016$District)
levels(ComprehensiveHiring2016$District)
ComprehensiveHiring2016$RRSummativePSTOutcome53 <- NULL
ComprehensiveHiring2016$RRDateStartteaching57 <- NULL
ComprehensiveHiring2016$RRStartTeaching56 <- NULL
hist(ComprehensiveHiring2016$District)
plot(ComprehensiveHiring2016$District, ComprehensiveHiring2016$RRPrescreenerAssignedSubject7)
separate(ComprehensiveHiring2016, BQ.Submitted., c("Submitted.Month", "Submitted.Day", "Submitted.Year"), sep = "/")
View(ComprehensiveHiring2016)
library(stringr)
library("stringi", lib.loc="~/R/win-library/3.3")
ComprehensiveHiring2016$Race[ComprehensiveHiring2016$Race == ""] <- NA
View(ComprehensiveHiring2016)
save.image("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/R 2016 Comprehensive Hiring.RData")
devtools::install_github("sfirke/janitor", ref = "split_up_adornments")
# Initialize knitr, set options, load packages
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
detach("package:pacman", unload=TRUE)
detach("package:devtools", unload=TRUE)
devtools::install_github("sfirke/janitor", ref = "split_up_adornments")
devtools :: session_info()
install.packages("devtools")
install.packages("devtools")
install.packages("bindrcpp")
install.packages("dplyr")
devtools::install_github("sfirke/janitor", ref = "split_up_adornments")
# Initialize knitr, set options, load packages
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
tntp_ratings <- read_excel("partner program status tracker 5-18-17.xlsx", sheet = "ACE") %>%
select(participantExternalId, cultureOfLearningScore:overallObservationScore, round) %>%
clean_names()
library(tntpr)
install.packages("tntpr")
library(tntpr)
install.packages("tntpr")
library(devtools) # for install_git()
if(!require("tntpr")) install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git")
library(tntpr)
library(tntpr)
install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git")
# Initialize knitr, set options, load packages
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
install.packages("extrafontdb")
install.packages("tntpr")
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
# Initialize knitr, set options, load packages
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
install.packages("extrafontdb")
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
library(tntpr)
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
install.packages("Rttf2pt1")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
install.packages("Rttf2pt1")
install.packages("htmlwidgets")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
library(tntpr)
library(tntpr)
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
tntp_ratings <- read_excel("partner program status tracker 5-18-17.xlsx", sheet = "ACE") %>%
select(participantExternalId, cultureOfLearningScore:overallObservationScore, round) %>%
clean_names()
# Average the competencies to produce an overall score
catr_means <- catr %>%
select(-CA, -CS, -TC, -Sm) %>%
gather(measure, value, TP:RD) %>%
mutate(value = as.numeric(value)) %>%
group_by(round, Teacher) %>%
summarise(overall_mean = mean(value, na.rm = TRUE)) %>% # there's one teacher in the 1st round who is missing a rating just on the RD indicator; thus na.rm = TRUE
ungroup() %>%
mutate(adj_catr_means_buckets = case_when( # these cut points come from a deck Megan Goodrich emailed; modeled off of DC IMPACT.  I confirmed this approach w/ Megan.
overall_mean < 2 ~ 1,
overall_mean < 2.5 ~ 2,
overall_mean < 3 ~ 3,
overall_mean < 3.5 ~ 4,
overall_mean <= 4 ~ 5,
TRUE ~ 10000 # there should not be anything possible above 4
)
)
tntp_means <- tntp_ratings %>%
select(Teacher = participantexternalid, overall_mean = overallobservationscore, round)
# Rename variables and combine
all_rounds <- bind_rows(
catr_means %>%
select(rating = adj_catr_means_buckets, round) %>%
mutate(source = "CATR"),
tntp_means %>%
select(rating = overall_mean, round) %>%
mutate(source = "TNTP", round = parse_number(round))
) %>%
mutate(
rating_categorical_label = if_else(
source %in% "TNTP", # use these cutoff scores for those whose obs averages come from the TNTP Core rubric
as.character(cut(rating, breaks = c(1, 2, 2.8, 3.6, 4.3, 5.01), labels = c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful"), right = FALSE)),
if_else(source %in% c("CATR"), # these were bucketed out to categories in the case_when() statement above; just convert to words:
c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful")[rating], # this maps these words to the integers 1:5
as.character(NA))
),
rating_categorical_label = ordered(rating_categorical_label, levels = c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful")) # order as a factor for printing in the correct order
)
crosstabs <- all_rounds %>%
tabyl(source, rating_categorical_label, round, show_na = FALSE) %>% # this line will only work if you install a development version of janitor:
# install_github("sfirke/janitor", ref = "split_up_adornments")
purrr::map(adorn_percentages, "row") # convert each entry in the list to percentages
crosstabs[[1]] %>% mutate(Round = "Round 1")  %>% select(Round, everything()) %>% kable()
crosstabs[[2]] %>% mutate(Round = "Round 2")  %>% select(Round, everything()) %>% kable()
crosstabs[[3]] %>% mutate(Round = "Round 3")  %>% select(Round, everything()) %>% kable()
crosstabs[[4]] %>% mutate(Round = "Round 4")  %>% select(Round, everything()) %>% kable()
library(tntpr)
library("tntpr", lib.loc="~/R/win-library/3.3")
devtools::install_github("sfirke/janitor", ref = "split_up_adornments")
devtools::install_github("sfirke/janitor", ref = "split_up_adornments")
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
install.packages("Rttf2pt1")
install.packages("htmlwidgets")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
library(tntpr)
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
tntp_ratings <- read_excel("partner program status tracker 5-18-17.xlsx", sheet = "ACE") %>%
select(participantExternalId, cultureOfLearningScore:overallObservationScore, round) %>%
clean_names()
# Average the competencies to produce an overall score
catr_means <- catr %>%
select(-CA, -CS, -TC, -Sm) %>%
gather(measure, value, TP:RD) %>%
mutate(value = as.numeric(value)) %>%
group_by(round, Teacher) %>%
summarise(overall_mean = mean(value, na.rm = TRUE)) %>% # there's one teacher in the 1st round who is missing a rating just on the RD indicator; thus na.rm = TRUE
ungroup() %>%
mutate(adj_catr_means_buckets = case_when( # these cut points come from a deck Megan Goodrich emailed; modeled off of DC IMPACT.  I confirmed this approach w/ Megan.
overall_mean < 2 ~ 1,
overall_mean < 2.5 ~ 2,
overall_mean < 3 ~ 3,
overall_mean < 3.5 ~ 4,
overall_mean <= 4 ~ 5,
TRUE ~ 10000 # there should not be anything possible above 4
)
)
tntp_means <- tntp_ratings %>%
select(Teacher = participantexternalid, overall_mean = overallobservationscore, round)
# Rename variables and combine
all_rounds <- bind_rows(
catr_means %>%
select(rating = adj_catr_means_buckets, round) %>%
mutate(source = "CATR"),
tntp_means %>%
select(rating = overall_mean, round) %>%
mutate(source = "TNTP", round = parse_number(round))
) %>%
mutate(
rating_categorical_label = if_else(
source %in% "TNTP", # use these cutoff scores for those whose obs averages come from the TNTP Core rubric
as.character(cut(rating, breaks = c(1, 2, 2.8, 3.6, 4.3, 5.01), labels = c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful"), right = FALSE)),
if_else(source %in% c("CATR"), # these were bucketed out to categories in the case_when() statement above; just convert to words:
c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful")[rating], # this maps these words to the integers 1:5
as.character(NA))
),
rating_categorical_label = ordered(rating_categorical_label, levels = c("Ineffective", "Minimally Effective", "Developing", "Proficient", "Skillful")) # order as a factor for printing in the correct order
)
crosstabs <- all_rounds %>%
tabyl(source, rating_categorical_label, round, show_na = FALSE) %>% # this line will only work if you install a development version of janitor:
# install_github("sfirke/janitor", ref = "split_up_adornments")
purrr::map(adorn_percentages, "row") # convert each entry in the list to percentages
crosstabs[[1]] %>% mutate(Round = "Round 1")  %>% select(Round, everything()) %>% kable()
crosstabs[[2]] %>% mutate(Round = "Round 2")  %>% select(Round, everything()) %>% kable()
crosstabs[[3]] %>% mutate(Round = "Round 3")  %>% select(Round, everything()) %>% kable()
crosstabs[[4]] %>% mutate(Round = "Round 4")  %>% select(Round, everything()) %>% kable()
all_rounds %>%
group_by(source, round) %>%
summarise(mean_adj_rating = mean(rating, na.rm = TRUE),
n = n(),
n_ratings = sum(!is.na(rating))) %>%
kable()
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
install.packages("Rttf2pt1")
install.packages("htmlwidgets")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
chooseCRANmirror(graphics=FALSE, ind=1)
install.packages("extrafontdb")
# Initialize knitr, set options, load packages
install.packages("extrafontdb")
install.packages("Rttf2pt1")
install.packages("htmlwidgets")
if(!suppressPackageStartupMessages(require("pacman"))) install.packages("pacman"); library(pacman)
if(!suppressPackageStartupMessages(require("tntpr"))) { p_load(devtools); install_git("https://tools.tntp.org/bitbucket/scm/ct/tntpr.git") }
p_load(knitr, tntpr, readr, purrr, readxl, dplyr, magrittr, ggplot2, stringr, devtools, scales, janitor, tidyr)
set_data_memo_formatting() # sets some common knitr chunk options
chooseCRANmirror(graphics=FALSE, ind=1)
# function to treat each tab of the CATR data, snagged from Google Sheets
# data source: https://docs.google.com/spreadsheets/d/1AiDxXoMXgHs0fRUbnjeqkK5DOneFCKeJ3LGcjpsu6gQ/edit#gid=2030130540, copied on 6-22-2017 into the below Excel file
read_catr_data <- function(round_no){
catr <- read_excel("CATR data from Google Sheets SY 16-17.xlsx", sheet = paste0("Round", round_no))
names(catr) <- catr[1, ] # get col names, which are in the first row
catr[catr == "No data"] <- NA # this value should be made NA so that remove_empty_cols works on the round 1 data
catr <- catr[-1, ] %>% # drop first row that had names and any unused cols at the end
remove_empty_cols()
catr$round <- round_no
catr <- filter(catr, !is.na(TP)) # remove rows where teachers did not get a score - there are no missing values of TP in the 4 rounds, I confirmed manually
catr
}
catr <- bind_rows(
lapply(1:4, read_catr_data)
)
tntp_ratings <- read_excel("partner program status tracker 5-18-17.xlsx", sheet = "ACE") %>%
select(participantExternalId, cultureOfLearningScore:overallObservationScore, round) %>%
clean_names()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, rows = 10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
summary(LETTERS)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.c, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x =
| cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x =cars$dist, y = cars$speed)
plot(x =cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
library(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
# read outcome file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
setwd("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/Coursera")
# read outcome file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
sort(x, decreasing = TRUE)[1:min(N, length(x))]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, "heart attack")
best(NY, "heart attack")
best <- function(state, outcome) {
## Read outcome data
sort(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)[1:min(N, length(5))]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, "heart attack")
outcome <- outcome %>%
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=heart_attack)
outcome <- outcome
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=heart_attack)
#load packages
library(pacman)
p_load(readr, dplyr, janitor, tidyr)
outcome <- outcome
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=heart_attack)
outcome <- outcome
rename(heart_attack=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcome <- outcome
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack="heart_attack")
outcome <- outcome %>%
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack="heart_attack")
outcome <- outcome %>%
rename(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=heart_attack)
outcome <- outcome %>%
rename(heart_attack=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
best <- function(state, outcome) {
## Read outcome data
sort(outcome$heart_attack)[1:min(N, length(5))]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, "heart_attack")
best <- function(state, outcome) {
## Read outcome data
sort(heart_attack)[1:min(N, length(5))]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, "heart_attack")
best(NY, heart_attack)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, heart_attack)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome") }
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome") }
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best(NY, heart_attack)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## The function will do other things after this is sorted out.
}
best(NY, heart_attack)
x
outcome <- outcome %>%
rename(heart_attack=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
rename(heart_failure=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>%
rename(pneumonia=Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
