mutate(vacancy = ifelse(eff_date > "2016-09-06", "mid year",
ifelse(eff_date <= "2016-09-06", "start of year", eff_date)))
table(fellow_hiring_data$vacancy)
#not a large enough sample size between MY and persistent vacancies to make conclusions about vacancy date and performance
#break out D75 as a group
d75 <-filter(all_fellow_data, d75 ==  "D75")
non_d75 <- filter(all_fellow_data, is.na(d75))
d75_2016 <-filter(all_2016_fellow_data, oct_subject ==  "D75")
non_d75_2016 <- filter(all_2016_fellow_data, oct_subject != "D75")
d75_item<-filter(all_fellow_data, subject == "Special Education - D75")
non_d75_item<-filter(all_fellow_data, subject != "Special Education - D75")
d75_2016_item<-filter(all_2016_fellow_data, oct_subject == "D75")
non_d75_2016_item<-filter(all_2016_fellow_data, oct_subject != "D75")
effectiveness_dist_d75 <- d75 %>%
group_by(dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(dom2_dom3_avg, percent, count)
effectiveness_dist_2016_d75 <- d75_2016 %>%
group_by(oct_dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(oct_dom2_dom3_avg, percent, count)
effectiveness_dist_non_d75 <- non_d75 %>%
group_by(dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(dom2_dom3_avg, percent, count)
effectiveness_dist_2016_non_d75 <- non_d75_2016 %>%
group_by(oct_dom2_dom3_avg) %>%
drop_na(oct_dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(oct_dom2_dom3_avg, percent, count)
d75_by_coach <- d75 %>%
group_by(coachname, pst_quartile) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(coachname, pst_quartile, count)
subject_area_pst <- all_fellow_data %>%
group_by(subject) %>%
summarise(mean = mean(currentsummativescore)) %>%
arrange(mean)
# where did the oct_subject entries go? the disappear when I run the summarise line
subject_area_2016_pst <- all_2016_fellow_data %>%
group_by(oct_subject) %>%
summarise(mean = mean(current_summative_score)) %>%
arrange(mean)
subject_area_effectiveness <- all_fellow_data %>%
group_by(subject, dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(mean = mean(dom2_dom3_avg)) %>%
select(subject, dom2_dom3_avg, mean, count) %>%
arrange(mean)
pst_ratings_dist_d75 <- tabyl(d75, pst_quartile)
pst_ratings_2016_dist_d75 <- tabyl(d75_2016, pst_quartile)
pst_ratings_dist_non_d75 <- tabyl(non_d75, pst_quartile)
#look at relationship between selection performance and FDI ratings
selection_and_fdi <- all_fellow_data %>%
group_by(rrteacherpresence23,rrteachingsampleoverall132,rrcriticalthinkingoverall27, dom2_dom3_avg) %>%
summarise(count = n()) %>%
select(rrteacherpresence23,rrteachingsampleoverall132,rrcriticalthinkingoverall27, dom2_dom3_avg, count) %>%
filter(!is.na(dom2_dom3_avg))
aggregate(selection_and_fdi[, 4], list(selection_and_fdi$rrteacherpresence23), mean)
aggregate(selection_and_fdi[, 4], list(selection_and_fdi$rrteachingsampleoverall132), mean)
aggregate(selection_and_fdi[, 4], list(selection_and_fdi$rrcriticalthinkingoverall27), mean)
selection_and_fdi_2016 <- all_2016_fellow_data %>%
group_by(rrteacherpresence23,rrteachingsampleoverall132,rrcriticalthinkingoverall27, oct_dom2_dom3_avg) %>%
summarise(count = n()) %>%
select(rrteacherpresence23,rrteachingsampleoverall132,rrcriticalthinkingoverall27, oct_dom2_dom3_avg, count) %>%
filter(!is.na(oct_dom2_dom3_avg))
aggregate(selection_and_fdi_2016[, 4], list(selection_and_fdi_2016$rrteacherpresence23), mean)
aggregate(selection_and_fdi_2016[, 4], list(selection_and_fdi_2016$rrteachingsampleoverall132), mean)
aggregate(selection_and_fdi_2016[, 4], list(selection_and_fdi_2016$rrcriticalthinkingoverall27), mean)
nrow(selection_and_fdi[selection_and_fdi$rrteacherpresence23 == 0,])
nrow(selection_and_fdi[selection_and_fdi$rrteachingsampleoverall132 == 0,])
nrow(selection_and_fdi[selection_and_fdi$rrcriticalthinkingoverall27 == 0,])
nrow(selection_and_fdi_2016[selection_and_fdi_2016$rrteacherpresence23 == 0,])
nrow(selection_and_fdi_2016[selection_and_fdi_2016$rrteachingsampleoverall132 == 0,])
nrow(selection_and_fdi_2016[selection_and_fdi_2016$rrcriticalthinkingoverall27 == 0,])
mean(selection_and_fdi$dom2_dom3_avg [selection_and_fdi$rrteacherpresence23==1 & selection_and_fdi$rrteachingsampleoverall132==1 & selection_and_fdi$rrcriticalthinkingoverall27==1] , na.rm = TRUE)
mean(selection_and_fdi_2016$oct_dom2_dom3_avg [selection_and_fdi_2016$rrteacherpresence23==1 & selection_and_fdi_2016$rrteachingsampleoverall132==1 & selection_and_fdi_2016$rrcriticalthinkingoverall27==1], na.rm = TRUE)
all_fellow_data %>%
group_by(tt2id) %>%
mutate(diff= currentsummativescore - observationaveragetodate) %>%
ungroup(tt2id) %>%
summarise(mean(diff))
dput(june_2016_pst_ratings)
setwd("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/Coursera")
#load packages
library(pacman)
p_load(readr, dplyr, janitor, tidyr)
# read outcome file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome <- outcome %>%
rename(heart_attack=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
rename(heart_failure=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>%
rename(pneumonia=Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
best("NY", "heart_attack")
h
=hh
top <- group_by(outcome, heart_attack, State) %>%
filter(heart_attack == min(heart_attack)) %>%
filter(1:n() == 1)
outcome <- outcome %>%
list((outcome = min(heart_attack)), by = state)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
group_by(state, heart_attack)
outcome = min(heart_attack)
gb
=
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort(heart_attack)[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
group_by(state, heart_attack)
outcome = min(heart_attack)
}
best("NY", "heart_attack")
best("NY", heart_attack)
outcome <- outcome %>%
rename("heart attack"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
rename("heart failure"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>%
rename("pneumonia"=Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#load packages
library(pacman)
p_load(readr, dplyr, janitor, tidyr)
# read outcome file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
# make a histogram of 30-day death rates by heart attack
# need to first make column class numberic, since cols were read in as character
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome <- outcome %>%
rename("heart attack"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
rename("heart failure"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>%
rename("pneumonia"=Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
best <- function(state, outcome) {
## Read outcome data
data = outcome
sort("heart attack")[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
group_by(state, "heart attack")
outcome = min("heart attack")
}
best("NY", "heart attack")
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Read outcome data
sort("heart attack")[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
group_by(state, "heart attack")
outcome = min("heart attack")
}
best("NY", "heart attack")
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Read outcome data
sort("heart attack")[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
#rank hospital by 'outcome':
rankedHospital <- outcome[order(outcome[, colNumber], outcome[, 2]), ]
# 7.1 if input 'num' == 'best' then then 'numRank' = first;
if(num == "best") {numRank = 1}
# 7.2 if input 'num' == 'worst' then 'numRank' = last;
else if(num == "worst") {numRank = nrow(rankedHospital)}
# 7.3 if input 'num' == number then 'numRank' = 'num'.
else{numRank = num}
# 8. return the hospital in the requested rank.
return(rankedHospital[numRank, 2])
}
best("NY", "heart attack")
outcome_heartattack <- outcome %>%
list((outcome = min("heart attack")), by = state)
outcome_heartattack <- outcome %>%
list((outcome = min("heart attack")), by = state.abb)
head(outcome_heartattack)
top <- group_by(outcome, "heart attack", State) %>%
filter("heart attack" == min("heart attack")) %>%
filter(1:n() == 1)
View(top)
#load packages
library(pacman)
p_load(readr, dplyr, janitor, tidyr)
# read outcome file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
# make a histogram of 30-day death rates by heart attack
# need to first make column class numberic, since cols were read in as character
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
# Write a function called best that take two arguments: the 2-character abbreviated name of a state and an
# outcome name. The function reads the outcome-of-care-measures.csv file and returns a character vector
# with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified outcome
#in that state. The hospital name is the name provided in the Hospital.Name variable. The outcomes can
# be one of “heart attack”, “heart failure”, or “pneumonia”. Hospitals that do not have data on a particular
#outcome should be excluded from the set of hospitals when deciding the rankings
outcome <- outcome %>%
rename("heart attack"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
rename("heart failure"=Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>%
rename("pneumonia"=Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
View(outcome)
top <- group_by(outcome, "heart attack", State) %>%
filter(min("heart attack")) %>%
filter(1:n() == 1)
top <- group_by(outcome, "heart attack", State) %>%
filter(best = min("heart attack")) %>%
filter(1:n() == 1)
top <- group_by(outcome, "heart attack", State) %>%
filter(best == min("heart attack")) %>%
filter(1:n() == 1)
top <- group_by(outcome, "heart attack", State) %>%
filter("heart attack" == min("heart attack")) %>%
filter(1:n() == 1)
View(top)
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Read outcome data
sort("heart attack")[1:min(N, length(5))]
if (!any(state == state.abb)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
X <- x[x$State == state,]
names(X)[c(11, 17, 23)] <- outcomevector
answer <- X[X[,outcome] == min(X[,outcome]), ][2]
FA <- answer[with(answer, order(Hospital.Name)), ]
FA[1]
}
best("NY", "heart attack")
best("SC", "heart attack")
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Read outcome data
sort("heart attack")[1:min(N, length(5))]
if (!any(state == State)){
stop("invalid state")
}
if (!any(outcome == c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
X <- x[x$State == state,]
names(X)[c(11, 17, 23)] <- outcomevector
answer <- X[X[,outcome] == min(X[,outcome]), ][2]
FA <- answer[with(answer, order(Hospital.Name)), ]
FA[1]
}
best("SC", "heart attack")
best<- function(state, outcome)
{
outcome1 <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
if(!any(state == outcome1$State)){
stop("invalid state")}
else if((outcome %in% c("heart attack", "heart failure",
"pneumonia")) == FALSE) {
stop(print("invalid outcome"))
}
outcome2 <- subset(outcome1, State == state)
if (outcome == "heart attack") {
colnum <- 11
}
else if (outcome == "heart failure") {
colnum <- 17
}
else {
colnum <- 23
}
min_row <- which(as.numeric(outcome2[ ,colnum]) ==
min(as.numeric(outcome2[ ,colnum]), na.rm = TRUE))
hospitals <- outcome2[min_row,2]
hospitals <- sort(hospitals)
return(hospitals[1])
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!any(state == outcome1$State)){
stop("invalid state")}
else if((outcome %in% c("heart attack", "heart failure",
"pneumonia")) == FALSE) {
stop(print("invalid outcome"))
}
outcome2 <- subset(outcome1, State == state)
if (outcome == "heart attack") {
colnum <- 11
}
else if (outcome == "heart failure") {
colnum <- 17
}
else {
colnum <- 23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!any(state == outcome$State)){
stop("invalid state")}
else if((outcome %in% c("heart attack", "heart failure",
"pneumonia")) == FALSE) {
stop(print("invalid outcome"))
}
outcome2 <- subset(outcome, State == state)
if (outcome == "heart attack") {
colnum <- 11
}
else if (outcome == "heart failure") {
colnum <- 17
}
else {
colnum <- 23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
rankhospital("NC", "heart attack", "worst")
#rank hospital by 'outcome':
rankhospital <- function(state, outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
# Column name is same as variable so changing it
chosen_state <- state
# Check that state and outcome are valid
if (!chosen_state %in% unique(out_dt[["State"]])) {
stop('invalid state')
}
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
#Filter by state
out_dt <- out_dt[state == chosen_state]
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
# Removing Missing Values for numerical datatype (outcome column)
out_dt <- out_dt[complete.cases(out_dt),]
# Order Column to Top
out_dt <- out_dt[order(get(outcome), `hospital name`)]
out_dt <- out_dt[,  .(`hospital name` = `hospital name`, state = state, rate = get(outcome), Rank = .I)]
if (num == "best"){
return(out_dt[1,`hospital name`])
}
if (num == "worst"){
return(out_dt[.N,`hospital name`])
}
return(out_dt[num,`hospital name`])
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
# Change outcome column class
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
if (num == "best"){
return(out_dt[order(state, get(outcome), `hospital name`)
, .(hospital = head(`hospital name`, 1))
, by = state])
}
if (num == "worst"){
return(out_dt[order(get(outcome), `hospital name`)
, .(hospital = tail(`hospital name`, 1))
, by = state])
}
return(out_dt[order(state, get(outcome), `hospital name`)
, head(.SD,num)
, by = state, .SDcols = c("hospital name") ])
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
dput(june_2016_pst_ratings)`
g
=
=gf
setwd("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/FDI FE Analysis")
vfgth=f
run(fe)
