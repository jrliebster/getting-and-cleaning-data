setwd("C:/Users/robert.rosen/Documents/BitBucket/nyctf/analyst_hiring_exercise")
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2,corrplot)
student_scores <- read_csv ("StudentScores.csv")%>%
clean_names()
educator_effectiveness <- read_csv ("educatoreffectivenesssnapshot.csv", col_names = TRUE, skip = 7)
student_scores <-filter (student_scores, number_tested !=  "< 10")
educator_effectiveness <- educator_effectiveness %>%
filter(!is.na(total))
student_scores <- student_scores %>%
mutate_at(vars(starts_with("level")),funs(as.numeric)) %>%
mutate_at(vars(starts_with("number")),funs(as.numeric)) %>%
mutate_at(vars(contains("percent")),funs(as.numeric)) %>%
mutate_at(vars(contains("average")),funs(as.numeric))
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_math_proficiency_percent = number_proficient/number_tested)
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient)
View(educator_effectiveness)
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_number_proficient = sum(number_profieicnet),
school_number_test = sum(number_tested),
school_math_proficiency_percent = school_number_proficient/school_number_tested)
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_number_proficient = sum(number_profieicnet),
school_number_test = sum(number_tested))
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested * percent_proficient)
View(math_proficiency)
#Business Rules:
#Values of "<10" may be omitted (i.e., treated as NA)
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
setwd("C:/Users/robert.rosen/Documents/BitBucket/nyctf/analyst_hiring_exercise")
#load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2,corrplot)
#read data with clean names
student_scores <- read_csv ("StudentScores.csv")%>%
clean_names()
educator_effectiveness <- read_csv ("educatoreffectivenesssnapshot.csv", col_names = TRUE, skip = 7)
#delete rows with missing data/values of less than 10
student_scores <-filter (student_scores, number_tested !=  "< 10")
educator_effectiveness <- educator_effectiveness %>%
filter(!is.na(total))
#ensure all numbers are read as numeric variables
student_scores <- student_scores %>%
mutate_at(vars(starts_with("level")),funs(as.numeric)) %>%
mutate_at(vars(starts_with("number")),funs(as.numeric)) %>%
mutate_at(vars(contains("percent")),funs(as.numeric)) %>%
mutate_at(vars(contains("average")),funs(as.numeric))
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
#same number of observations when joined, with no missing data
student_scores$building_name %in% educator_effectiveness$location
#not all return "TRUE", so not every student score location has a match on educator effectiveness snapshot
test <- student_scores %>%
distinct(buildingname)
#Part 1: Summarize the Student Scores data to show the percent of students who are proficient or higher in math at each school.
#a.	Populate a table showing the top ten schools in math proficiency along with their proficiency rates (percent of students scoring at proficient or higher). There should be one percentage per school that accounts for all students at the school.
#add percent in levels 1 and 2, mutliply that percent by number of students tested, group by school name, then calculate weighted average of proficiency/number proficient
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics", subgroup == "All Students") %>%
select(building_name, subject_name, number_tested, level1_highlyproficient, level2_proficient) %>%
mutate(percent_proficient_or_higher = level1_highlyproficient + level2_proficient) %>%
mutate(number_proficient = number_tested*(percent_proficient_or_higher/100)) %>%
group_by(building_name) %>%
summarise(school_math_proficiency_percent = weighted.mean(percent_proficient_or_higher, number_proficient))
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_number_proficient = sum(number_profieicnet),
school_number_test = sum(number_tested),
school_math_proficiency_percent = school_number_proficient/school_number_tested)
#Business Rules:
#Values of "<10" may be omitted (i.e., treated as NA)
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
setwd("C:/Users/robert.rosen/Documents/BitBucket/nyctf/analyst_hiring_exercise")
#load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2,corrplot)
#read data with clean names
student_scores <- read_csv ("StudentScores.csv")%>%
clean_names()
educator_effectiveness <- read_csv ("educatoreffectivenesssnapshot.csv", col_names = TRUE, skip = 7)
#delete rows with missing data/values of less than 10
student_scores <-filter (student_scores, number_tested !=  "< 10")
educator_effectiveness <- educator_effectiveness %>%
filter(!is.na(total))
#ensure all numbers are read as numeric variables
student_scores <- student_scores %>%
mutate_at(vars(starts_with("level")),funs(as.numeric)) %>%
mutate_at(vars(starts_with("number")),funs(as.numeric)) %>%
mutate_at(vars(contains("percent")),funs(as.numeric)) %>%
mutate_at(vars(contains("average")),funs(as.numeric))
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
#same number of observations when joined, with no missing data
student_scores$building_name %in% educator_effectiveness$location
#not all return "TRUE", so not every student score location has a match on educator effectiveness snapshot
test <- student_scores %>%
distinct(buildingname)
#Part 1: Summarize the Student Scores data to show the percent of students who are proficient or higher in math at each school.
#a.	Populate a table showing the top ten schools in math proficiency along with their proficiency rates (percent of students scoring at proficient or higher). There should be one percentage per school that accounts for all students at the school.
#add percent in levels 1 and 2, mutliply that percent by number of students tested, group by school name, then calculate weighted average of proficiency/number proficient
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics", subgroup == "All Students") %>%
select(building_name, subject_name, number_tested, level1_highlyproficient, level2_proficient) %>%
mutate(percent_proficient_or_higher = level1_highlyproficient + level2_proficient) %>%
mutate(number_proficient = number_tested*(percent_proficient_or_higher/100)) %>%
group_by(building_name) %>%
summarise(school_math_proficiency_percent = weighted.mean(percent_proficient_or_higher, number_proficient))
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_number_proficient = sum(number_proficient),
school_number_test = sum(number_tested),
school_math_proficiency_percent = school_number_proficient/school_number_tested)
#Business Rules:
#Values of "<10" may be omitted (i.e., treated as NA)
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
setwd("C:/Users/robert.rosen/Documents/BitBucket/nyctf/analyst_hiring_exercise")
#load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2,corrplot)
#read data with clean names
student_scores <- read_csv ("StudentScores.csv")%>%
clean_names()
educator_effectiveness <- read_csv ("educatoreffectivenesssnapshot.csv", col_names = TRUE, skip = 7)
#delete rows with missing data/values of less than 10
student_scores <-filter (student_scores, number_tested !=  "< 10")
educator_effectiveness <- educator_effectiveness %>%
filter(!is.na(total))
#ensure all numbers are read as numeric variables
student_scores <- student_scores %>%
mutate_at(vars(starts_with("level")),funs(as.numeric)) %>%
mutate_at(vars(starts_with("number")),funs(as.numeric)) %>%
mutate_at(vars(contains("percent")),funs(as.numeric)) %>%
mutate_at(vars(contains("average")),funs(as.numeric))
#Ensure that every school on the Student Scores list has a match on the Educator Effectiveness Snapshot list
#same number of observations when joined, with no missing data
student_scores$building_name %in% educator_effectiveness$location
#not all return "TRUE", so not every student score location has a match on educator effectiveness snapshot
test <- student_scores %>%
distinct(buildingname)
#Part 1: Summarize the Student Scores data to show the percent of students who are proficient or higher in math at each school.
#a.	Populate a table showing the top ten schools in math proficiency along with their proficiency rates (percent of students scoring at proficient or higher). There should be one percentage per school that accounts for all students at the school.
#add percent in levels 1 and 2, mutliply that percent by number of students tested, group by school name, then calculate weighted average of proficiency/number proficient
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics", subgroup == "All Students") %>%
select(building_name, subject_name, number_tested, level1_highlyproficient, level2_proficient) %>%
mutate(percent_proficient_or_higher = level1_highlyproficient + level2_proficient) %>%
mutate(number_proficient = number_tested*(percent_proficient_or_higher/100)) %>%
group_by(building_name) %>%
summarise(school_math_proficiency_percent = weighted.mean(percent_proficient_or_higher, number_proficient))
math_proficiency <- student_scores %>%
filter(subject_name == "Mathematics",
subgroup == "All Students") %>%
mutate(number_proficient = number_tested*percent_proficient) %>%
group_by(building_name) %>%
summarise(school_number_proficient = sum(number_proficient),
school_number_tested = sum(number_tested),
school_math_proficiency_percent = school_number_proficient/school_number_tested)
View(math_proficiency)
