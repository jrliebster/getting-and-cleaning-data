p.mat = cor.mtest(indicators_domains_cor,0.95)[[1]],
sig.level=0.05,
method="number")
for_cor_non_anchor <- all_fellow_data %>%
ungroup() %>%
select (engineer_efficiency, strong_start, cold_call, stretch_it, control_the_game, everybody_writes,  mar_dom1a, mar_dom1c, mar_dom1e, mar_dom2b, mar_dom2c, mar_dom2d, mar_dom3b, mar_dom3c, mar_dom3d, mar_dom4a)
for_cor_non_anchor <- for_cor_non_anchor %>% drop_na(engineer_efficiency, strong_start, cold_call, stretch_it, control_the_game, everybody_writes,  mar_dom1a, mar_dom1c, mar_dom1e, mar_dom2b, mar_dom2c, mar_dom2d, mar_dom3b, mar_dom3c, mar_dom3d, mar_dom4a)
non_anchor_corplot1 <- corrplot(cor(for_cor_non_anchor),
p.mat = cor.mtest(for_cor_non_anchor,0.95)[[1]],
sig.level=0.05,
method="number")
for_cor_anchor <- all_fellow_data %>%
ungroup() %>%
select (x100percent, what_to_do, strong_voice, positive_framing, mar_dom1a, mar_dom1c, mar_dom1e, mar_dom2b, mar_dom2c, mar_dom2d, mar_dom3b, mar_dom3c, mar_dom3d, mar_dom4a)
for_cor_anchor <- for_cor_anchor %>% drop_na(x100percent, what_to_do, strong_voice, positive_framing, mar_dom1a, mar_dom1c, mar_dom1e, mar_dom2b, mar_dom2c, mar_dom2d, mar_dom3b, mar_dom3c, mar_dom3d, mar_dom4a)
anchor_corplot1 <- corrplot(cor(for_cor_anchor),
p.mat = cor.mtest(for_cor_anchor,0.95)[[1]],
sig.level=0.05,
method="number")
# look at relationship between coach ratings and Fellow performance--------------------------------------------
coach_ratings <- coach_ratings %>%
select(coachname, level, returner) %>%
filter(!is.na(coachname))
#change last, first to first last name
coach_ratings$coachname <- sub("(\\w+),\\s(\\w+)","\\2 \\1", coach_ratings$coachname)
coach_ratings$coachname[coach_ratings$coachname=="Lori Lowe-Ann"] <- "Lori-Ann Lowe"
coach_ratings$coachname[coach_ratings$coachname=="Ravit-Lauren Franceskin"] <- "Lauren Ravit-Franceskin"
coach_ratings$level[coach_ratings$level=="Green"] <- 3
coach_ratings$level[coach_ratings$level=="Yellow"] <- 2
coach_ratings$level[coach_ratings$level=="Red"] <- 1
all_fellow_data <- left_join(all_fellow_data, coach_ratings)
all_fellow_data <- all_fellow_data[, !(colnames(all_fellow_data) %in% c("coach_name.x","curret_status.x","enrollee_name.x", "training_academy.x"))]
all_fellow_data$level <- as.numeric(as.character(all_fellow_data$level))
coach_ratings_dist <- all_fellow_data %>%
group_by(coachname, pst_quartile) %>%
summarise(count = n()) %>%
mutate(mean = mean(pst_quartile)) %>%
select(coachname, pst_quartile, mean, count) %>%
slice(1)
coach_effectiveness_dist <- all_fellow_data %>%
group_by(coachname, dom2_dom3_avg) %>%
summarise(count = n()) %>%
mutate(mean_effectiveness = mean(dom2_dom3_avg)) %>%
select(coachname, mean_effectiveness) %>%
slice(1)
all_fellow_data %>%
group_by(growth_total, pst_quartile) %>%
summarise(count = n()) %>%
mutate(mean_growth = mean(growth_total)) %>%
select(growth_total, pst_quartile, mean_growth, count) # choose and reorder columns
coach_ta_scores <- all_fellow_data %>%
group_by(coachname, effectiveness, pst_quartile, round1, round2, round3) %>%
summarise(count = n()) %>%
mutate(mean_pst = mean(pst_quartile)) %>%
select(coachname, effectiveness, pst_quartile, round1, round2, round3, mean_pst, count) # choose and reorder columns
all_fellow_data %>%
group_by(coachname, growth_total) %>%
summarise(count = n()) %>%
mutate(mean_growth = mean(growth_total)) %>%
select(coachname, growth_total, mean_growth, count) # choose and reorder columns
#look at performance by training academy--------------------------------------------------------------
for_cor_ta <- coach_ta_scores %>%
ungroup() %>%
select (effectiveness, pst_quartile, round1, round2, round3)
for_cor_ta <- for_cor_ta %>% drop_na(effectiveness, pst_quartile, round1, round2, round3)
ta_corplot1 <- corrplot(cor(for_cor_ta),
p.mat = cor.mtest(for_cor_ta,0.95)[[1]],
sig.level=0.05,
method="number")
# mean pst scores, broken out by anchor and non-anchor, as well as by round------------------------------------
all_fellow_data %>%
ungroup() %>%
summarise(meanpstscore = mean(currentsummativescore, na.rm = TRUE))
pst_descriptives <- tabyl(all_fellow_data, pst_quartile)
all_fellow_data %>%
mutate(fyi_range = ifelse(count_fyi >= 5, 3, ifelse(count_fyi >= 1, 2, 1))) %>%
group_by(effectiveness, fyi_range) %>%
summarise(count = n()) %>%
select(effectiveness, fyi_range, count)
mean(all_fellow_data$anchortechaveragehighestfor)
mean(all_fellow_data$nonanchortechniqueaverage)
mean(all_2016_fellow_data$anchor_technique_average)
mean(all_2016_fellow_data$non_anchor_technique_average)
mean(all_fellow_data$round1)
mean(all_fellow_data$round2)
mean(all_fellow_data$round3)
all_2016_fellow_data <- all_2016_fellow_data %>% drop_na(week_2_fe_diagnostic, week_3_fe, week_4_fe, week_5_fe_obs_1, week_5_fe_obs_2)
all_2016_fellow_data <- all_2016_fellow_data %>%
mutate_at(vars(contains("week")),funs(as.numeric))
mean(all_2016_fellow_data$week_2_fe_diagnostic)
mean(all_2016_fellow_data$week_3_fe)
mean(all_2016_fellow_data$week_4_fe)
mean(all_2016_fellow_data$week_5_fe_obs_1)
mean(all_2016_fellow_data$week_5_fe_obs_2)
# relationship between principal survey data and pst scores, as well as FDI---------------------------
for_cor_principal_survey <- all_fellow_data %>%
ungroup() %>%
select (level, dom2_dom3_avg, pst_quartile, principal_effectiveness, currentsummativescore, observationaveragetodate, anchor_highest_formal_average, non_anchor_highest_formal_average)
for_cor_principal_survey <- for_cor_principal_survey %>% drop_na(level, dom2_dom3_avg, pst_quartile, principal_effectiveness)
principal_corplot1 <- corrplot(cor(for_cor_principal_survey),
p.mat = cor.mtest(for_cor_principal_survey,0.95)[[1]],
sig.level=0.05,
method="number")
principal_pst <- all_fellow_data %>%
group_by(principal_effectiveness, pst_quartile) %>%
summarise(count = n()) %>%
select(principal_effectiveness, pst_quartile)
coach_level_pst <- all_fellow_data %>%
group_by(level, pst_quartile) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(level, pst_quartile, percent)
coach_level_fdi <- all_fellow_data %>%
group_by(level, effectiveness) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(level, effectiveness, percent)
coach_level_principal <- all_fellow_data %>%
group_by(level, principal_effectiveness) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count)) %>%
select(level, principal_effectiveness, percent)
coach_returning_d75 <- all_fellow_data %>%
group_by(returner, d75, pst_quartile) %>%
summarise(count = n()) %>%
select(returner, d75, pst_quartile, count)
mean(all_fellow_data$effectiveness)
#create vector with just vacancy effective and create dates---------------------------------------------------
vacancy_effective <- vacancy_list %>%
select(eff_date, vacancy_create_date)
#now compare vacancy date to performance
nhf <- nhf %>%
rename(job_id=jobid)
hiring_data <- left_join(nhf, vacancy_list, by = "job_id")
hiring_data <- hiring_data[, (colnames(hiring_data) %in% c("job_id", "eff_date", "name", "file_no", "effective_date", "phone", "email", "nomination_date"))]
hiring_data$name <- sub("(\\w+),\\s(\\w+)","\\2 \\1", hiring_data$name)
hiring_data <- hiring_data %>%
rename(enrolleename=name)
fellow_hiring_data <- left_join(hiring_data, all_fellow_data, by = "enrolleename")
fellow_hiring_data <- fellow_hiring_data %>%
filter(!is.na(currentstatus))
fellow_hiring_data$eff_date <- as.Date(fellow_hiring_data$eff_date, format = "%m/%d/%Y")
fellow_hiring_data$nomination_date <- as.Date(fellow_hiring_data$nomination_date, format = "%m/%d/%Y")
fellow_hiring_data <- fellow_hiring_data %>%
mutate(vacancy = ifelse(eff_date > "2016-09-06", "mid year",
ifelse(eff_date <= "2016-09-06", "start of year", eff_date)))
table(fellow_hiring_data$vacancy)
setwd("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/One-off analyses")
#load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot)
# read comprehensive report (pulled from TT2)
comprehensive <- read_csv ("june 2017 comprehensive 071817.csv") %>%
clean_names() %>%
rename(appuserid = rrappuserid3)
# change date-based columns to date class
comprehensive <- comprehensive %>%
mutate_at(vars(contains("date")),funs(as.Date), origin = "2015-01-01", format = "%m/%d/%Y")
# read in batch 1 acceptances list
batch1_acceptances <- read_csv ("batch one acceptances.csv") %>%
clean_names() %>%
mutate(batch_one = 1)
# join batch one acceptances with comprehensive data
comprehensive <- left_join(comprehensive, batch1_acceptances, by = "appuserid")
# when did candidates offered a spot in the program in batch 1 attend selection?
comprehensive$rrdateofinterview42 <- as.Date(comprehensive$rrdateofinterview42, format = "%m/%d/%Y")
batch_one_selection <- comprehensive %>%
select(rrdateofinterview42, batch_one) %>%
filter(batch_one == 1) %>%
group_by(rrdateofinterview42, batch_one) %>%
summarise(count=n())
# Date applied to notified from PS
# filter those out who have negative or zero days,
# as those represent dates candidates were notified from ehold
# (so they appear to have been notified before actually submitting the app, 185 cases)
notified_from_ps <- comprehensive %>%
filter(rreverappsubmitted25 == "Yes") %>%
mutate(applied_to_notified = difftime(rrnotifiedafterprescreeningdate30, rrappsubmitteddate26, units = c("days"))) %>%
filter(applied_to_notified > 0)
# calculate date between interview and offer
# emove those with 0 days in between, as they are deferrals
offered <- comprehensive %>%
filter(rreveroffered45 == "Yes") %>%
mutate(selection_to_offer = difftime(rroffereddate46, rrdateofinterview42, units = c("days"))) %>%
filter(selection_to_offer > 0)
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
setwd("C:/Users/jules.liebster/Desktop/TNTP/NYCTF/R/Hiring Tracker - Copy")
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
# change names of app user id field to match so I am able to join the comprehensive and fellow hiring datasets
names(fellow_hiring)[names(fellow_hiring) == "rrappuserid1"] <- "appid"
names(comprehensive)[names(comprehensive) == "rrappuserid2"] <- "appid"
# join comprehensive and fellow hiring
fellow_hiring <- left_join(fellow_hiring, comprehensive, by = "appid")
names(fellow_hiring)[names(fellow_hiring) == "phone_number.x"] <- "phone_number"
# next, need to remove unnecessary variables, like those related to schgeudling interviews
# keep only useful columns df <- subset(df, select = c(a,c))
# change names of school code field to DBN so I am able to join the renewal crosswalk and fellow hiring datasets, remove DBN NA
names(fellow_hiring)[names(fellow_hiring) == "rrschoolcode5"] <- "DBN"
fellow_hiring <- filter(fellow_hiring, !is.na(DBN))
# change POCNonWhite column to name POC
names(fellow_hiring)[names(fellow_hiring) == "rrpocnonehite63"] <- "POC"
# change blank cases in Cert.Description column to NA
new_hire_file$Cert.Description[new_hire_file$Cert.Description == ""] <- NA
# change blank cases in Lic.Desc column to NA
new_hire_file$Lic.Desc[new_hire_file$Lic.Desc == ""] <- NA
# join fellow_hiring and new_hire_file by phone number
# can't get these to properly merge and populate data by phone or email
names(comprehensive)[names(comprehensive) == "rremail16"] <- "email"
names(fellow_hiring)[names(fellow_hiring) == "rremail4"] <- "email"
new_hire_file$phone_number <- as.character(new_hire_file$phone_number)
all_fellow_hiring <- left_join(new_hire_file, fellow_hiring, by = "email")
# add column that pulls earliest data from all_fellow_hiring, read_csv, and readr recognized column entries as dates
# Re: the NA values, use pmin, it takes an argument na.rm .  Specify na.rm = TRUE to not have it return NA whenever any argument is NA.
all_fellow_hiring <- mutate(all_fellow_hiring, earliest_date = pmin(rrhiredate11, rrfellowhiringcommittmentformsubmitteddate16, na.rm = TRUE))
all_fellow_hiring$earliest_date <- as.Date(all_fellow_hiring$earliest_date, format = "%m/%d/%Y")
# created crosswalk for schools participating in early hiring
early_hiring_crosswalk <- read_csv("earlyhiringcrosswalk.csv") %>%
remove_empty_cols()
# create a variable to code which schools fellows were hired into that participated in early hiring
all_fellow_hiring <- left_join(all_fellow_hiring, early_hiring_crosswalk, by = "DBN")
# change #N/A cases in early hiring column to No
all_fellow_hiring$EH[is.na(all_fellow_hiring$EH)] <- "No"
# replace DBNs that do not follow 00x000 format
all_fellow_hiring$DBN[all_fellow_hiring$DBN=="12*318"] <- "12x318"
all_fellow_hiring$DBN[all_fellow_hiring$DBN=="23 K 363"] <- "23k363"
all_fellow_hiring$DBN[all_fellow_hiring$DBN=="C9X241"] <- "09X241"
all_fellow_hiring$DBN[all_fellow_hiring$DBN=="D9X329"] <- "09X329"
all_fellow_hiring$DBN <- tolower(all_fellow_hiring$DBN)
# extract borough code from DBN and add borough column
# tried ignore.case, but still pulls in only lower/uppercase letters (tried grep and str_extract)
all_fellow_hiring <- all_fellow_hiring %>%
mutate(borough = str_extract(DBN, "[a-z]+" ))
# change all letters in borough column to lowercase
table(all_fellow_hiring$borough)
# need to create a crosswalk for Renewal Schools, then create a column in the clean dataset that signifies whether or not the school is a renewal
# import 2017RenewalCrosswalk
renewal_crosswalk <- read_csv("2017RenewalCrosswalk.csv")
renewal_crosswalk$DBN <- tolower(renewal_crosswalk$DBN)
all_fellow_hiring <- left_join(all_fellow_hiring, renewal_crosswalk, by = "DBN")
# change #N/A cases in Renewal column to No
all_fellow_hiring$renewal[is.na(all_fellow_hiring$renewal)] <- "No"
#-----------------------------------------------------------------------------------------------------
# descriptive statistics
# Need to filter out any "incomplete" cases of RRStatusofChecklistItem14 before running descriptives
# percent of all Hires working in X
hiring_by_borough <- count(all_fellow_hiring, borough, wt = NULL, sort = TRUE)
hiring_by_subject <- count(all_fellow_hiring, rrprimarysubject15, wt = NULL, sort = TRUE)
# SA number by week percent
hiring_by_borough$percent<- prop.table(hiring_by_borough$n)
# calculate percent of university hired by week
# universitypercent <- all_fellow_hiring %>%
#   group_by(`UniversityClean`, week_number.x) %>%
#   summarise(count = n()) %>%
#   ungroup() %>%
#   group_by(`UniversityClean`) %>%
#   mutate(percent_of_total = round((count/sum(count)*100), 2),
#          cumulative = round(cumsum(percent_of_total)))
# change week of hire to date format
all_fellow_hiring <- all_fellow_hiring %>%
mutate(week_number = week(earliest_date))
#------------------------
table(all_fellow_hiring, borough)
# cumulative percent of Fellow hiring by Borough
borough_percent <- all_fellow_hiring %>%
group_by(borough, week_number) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(borough) %>%
mutate(percent_of_total = round((count/sum(count)*100), 2),
cumulative = round(cumsum(percent_of_total)))
# Percent of Fellows hired in Renewals
renewal_count <- all_fellow_hiring %>%
group_by(renewal) %>%
summarise(count = n())
# Percent of Bronx Cohort Fellows hired by week
Bronx_cohort_percent <- all_fellow_hiring %>%
group_by(rrbronxcohort17, week_number) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(rrbronxcohort17) %>%
mutate(percent_of_total = round((count/sum(count)*100), 2),
cumulative = round(cumsum(percent_of_total)))
bronx_week <- all_fellow_hiring %>%
filter(borough == "x") %>%
group_by(borough, week_number) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(week_number)
View(all_fellow_hiring)
View(all_fellow_hiring)
# I want to aggregate the DOE's new hire file (NHF) with NYCTF's hiring commitment form information on TT2
# (any tab listed as "HCF data" includes only data from the HCF report in TT2)
# and pull the earliest date the Fellow stated they accepted an offer.
# There are often 3 dates (date entered in DOE payroll on new hire file, date hiring commitment form was submitted,
# and start date inputted by Fellow on hiring commitment form).
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
names(fellow_hiring)[names(fellow_hiring) == "rrappuserid1"] <- "appid"
names(comprehensive)[names(comprehensive) == "rrappuserid2"] <- "appid"
# join comprehensive and fellow hiring
fellow_hiring <- left_join(fellow_hiring, comprehensive, by = "appid")
names(fellow_hiring)[names(fellow_hiring) == "phone_number.x"] <- "phone_number"
# next, need to remove unnecessary variables, like those related to schgeudling interviews
# keep only useful columns df <- subset(df, select = c(a,c))
# change names of school code field to DBN so I am able to join the renewal crosswalk and fellow hiring datasets, remove DBN NA
names(fellow_hiring)[names(fellow_hiring) == "rrschoolcode5"] <- "DBN"
fellow_hiring <- filter(fellow_hiring, !is.na(DBN))
# change POCNonWhite column to name POC
names(fellow_hiring)[names(fellow_hiring) == "rrpocnonehite63"] <- "POC"
# change blank cases in Cert.Description column to NA
new_hire_file$Cert.Description[new_hire_file$Cert.Description == ""] <- NA
# change blank cases in Lic.Desc column to NA
new_hire_file$Lic.Desc[new_hire_file$Lic.Desc == ""] <- NA
# join fellow_hiring and new_hire_file by phone number
# can't get these to properly merge and populate data by phone or email
names(comprehensive)[names(comprehensive) == "rremail16"] <- "email"
names(fellow_hiring)[names(fellow_hiring) == "rremail4"] <- "email"
new_hire_file$phone_number <- as.character(new_hire_file$phone_number)
all_fellow_hiring <- left_join(new_hire_file, fellow_hiring, by = "email")
new_hire_file$lic_desc[new_hire_file$licdesc == ""] <- NA
new_hire_file$cert_description[new_hire_file$cert_description == ""] <- NA
View(all_fellow_hiring)
View(all_fellow_hiring)
# I want to aggregate the DOE's new hire file (NHF) with NYCTF's hiring commitment form information on TT2
# (any tab listed as "HCF data" includes only data from the HCF report in TT2)
# and pull the earliest date the Fellow stated they accepted an offer.
# There are often 3 dates (date entered in DOE payroll on new hire file, date hiring commitment form was submitted,
# and start date inputted by Fellow on hiring commitment form).
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
# change names of app user id field to match so I am able to join the comprehensive and fellow hiring datasets
names(fellow_hiring)[names(fellow_hiring) == "rrappuserid1"] <- "appid"
names(comprehensive)[names(comprehensive) == "rrappuserid2"] <- "appid"
names(comprehensive)[names(comprehensive) == "rremail16"] <- "email"
names(fellow_hiring)[names(fellow_hiring) == "rremail4"] <- "email"
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "email")
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "phone_number")
all_fellow_hiring <- left_join(fellow_hiring, all_fellow_hiring, by = "appid")
# I want to aggregate the DOE's new hire file (NHF) with NYCTF's hiring commitment form information on TT2
# (any tab listed as "HCF data" includes only data from the HCF report in TT2)
# and pull the earliest date the Fellow stated they accepted an offer.
# There are often 3 dates (date entered in DOE payroll on new hire file, date hiring commitment form was submitted,
# and start date inputted by Fellow on hiring commitment form).
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
# change names of app user id field to match so I am able to join the comprehensive and fellow hiring datasets
names(fellow_hiring)[names(fellow_hiring) == "rrappuserid1"] <- "appid"
names(comprehensive)[names(comprehensive) == "rrappuserid2"] <- "appid"
# join comprehensive and fellow hiring
names(comprehensive)[names(comprehensive) == "rremail16"] <- "email"
names(fellow_hiring)[names(fellow_hiring) == "rremail4"] <- "email"
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "phone_number")
all_fellow_hiring <- left_join(fellow_hiring, all_fellow_hiring, by = "phone_number")
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "phone_number")
all_fellow_hiring <- left_join(fellow_hiring, all_fellow_hiring, by = "phone_number")
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "phone_number")
View(all_fellow_hiring)
head(all_fellow_hiring)
print(new())
print(all_fellow_hiring)
tail(all_fellow_hiring)
all_fellow_hiring <- left_join(all_fellow_hiring, fellow_hiring, by = "phone_number")
# I want to aggregate the DOE's new hire file (NHF) with NYCTF's hiring commitment form information on TT2
# (any tab listed as "HCF data" includes only data from the HCF report in TT2)
# and pull the earliest date the Fellow stated they accepted an offer.
# There are often 3 dates (date entered in DOE payroll on new hire file, date hiring commitment form was submitted,
# and start date inputted by Fellow on hiring commitment form).
# load packages
library(pacman)
p_load(readxl, readr, dplyr, janitor, tidyr, stringr, ggplot2, lubridate, data.table)
# upload datasets (Hiring information report from TT2, comprehensive report, and NHF from DOE client)
fellow_hiring <- read_csv("hiringinformation.csv") %>%
clean_names()
new_hire_file <- read_csv("fellowNHF.csv") %>%
clean_names()
comprehensive <- read_csv("comprehensive.csv") %>%
clean_names()
comprehensive <- comprehensive %>%
distinct(rrappuserid2, .keep_all = TRUE)
# rename phone number column in fellow_hiring and new_hire_file
names(fellow_hiring)[names(fellow_hiring) == "rrphonenumber18"] <- "phone_number"
names(new_hire_file)[names(new_hire_file) == "phone"] <- "phone_number"
names(comprehensive)[names(comprehensive) == "rrprimaryphone3"] <- "phone_number"
# need to remove any characters that are not numbers from the phone number field, this is trailing (look for code that removes special characters from inside vector)
trim.trailing <- function (x) sub("\\-s+$", "", x)
fellow_hiring$phone_number <- trim.trailing(fellow_hiring$phone_number)
fellow_hiring$phone_number <- gsub("[[:punct:]]", "", fellow_hiring$phone_number)
comprehensive$phone_number <- trim.trailing(comprehensive$phone_number)
comprehensive$phone_number <- gsub("[[:punct:]]", "", comprehensive$phone_number)
new_hire_file$phone_number <- trim.trailing(new_hire_file$phone_number)
new_hire_file$phone_number <- gsub("[[:punct:]]", "", new_hire_file$phone_number)
# change names of app user id field to match so I am able to join the comprehensive and fellow hiring datasets
names(fellow_hiring)[names(fellow_hiring) == "rrappuserid1"] <- "appid"
names(comprehensive)[names(comprehensive) == "rrappuserid2"] <- "appid"
# join comprehensive and fellow hiring
names(comprehensive)[names(comprehensive) == "rremail16"] <- "email"
names(fellow_hiring)[names(fellow_hiring) == "rremail4"] <- "email"
all_fellow_hiring <- left_join(new_hire_file, comprehensive, by = "phone_number")
all_fellow_hiring <- left_join(all_fellow_hiring, fellow_hiring, by = "phone_number")
View(all_fellow_hiring)
