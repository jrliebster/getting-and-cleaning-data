library(pacman)
p_load(dplyr, tidyr, readr, stringr, ggplot2, knitr, scales)
mcsd_data <- read_csv("Module 2 Data FINAL.csv") %>%
mutate(rating = factor(rating,
levels = c("Ineffective",
"Minimally Effective",
"Developing",
"Proficient",
"Highly Effective")))
getwd()
---
title: "Metro City School District Compensation Analysis"
author: "Analyst at TNTP"
date: "`r format(Sys.time(), '%B %d, %Y')`" # embeds the date the file was last updated
output:
word_document:
reference_docx: tntp-style-file.docx
toc: no
---
This is **an R Markdown document**. Markdown allows you to make tables and figures directly from your code, rather than copying and pasting them into a Word document. It's the ultimate level of reproducability, as you'll never have to check if the numbers were copied correctly.
Hit the "Knit Word" button above to see how this document can easily turn into a simple document.
When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. In other words, you can have the knitted document show your results (like a table or graph) *and* your code if you want.
Below, we have chunked off your analysis for you and given you suggestions and hints for writing the code that will create the table and graphs called for.
Ready to get started? Good! Because we want to make this look somewhat like a memo, delete all of this intro text above the first Markdown chunk (but keep the header text between the "---"s at the very top) and add your names to the header as the author.
```{r packages, include = FALSE}
# Load basic packages
library(pacman)
p_load(dplyr, tidyr, readr, stringr, ggplot2, knitr, scales)
### The official TNTP colors are:
### dark_blue = "#034772", medium_blue = "#2888BC", light_blue = "#73B7CE", green = "#699D46", orange = "#EA8936",
### gold = "#F9C347", dark_gray = "#58595B", medium_gray = "#7D7E81", light_gray = "#C1C2C4"
```
```{r set_knitr_defaults, include = FALSE}
# This sets default options for each knitr chunk, to save typing them over and over. You can ignore for now, and override in any given chunk if desired.
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
opts_chunk$set(dev = "png", fig.width = 9, fig.height = 5.5, dpi = 300) # control image sizes
opts_chunk$set(size = "small", background = "white")
opts_chunk$set(highlight = TRUE, comment = NA, tidy = FALSE)
opts_chunk$set(knitr.table.format = "html")
```
```{r import, include = FALSE}
# Read in data and order the rating variable from worst to best rating.
mcsd_data <- read_csv("Module 2 Data FINAL.csv") %>%
mutate(rating = factor(rating,
levels = c("Ineffective",
"Minimally Effective",
"Developing",
"Proficient",
"Highly Effective")))
str(mcsd_data)
table(mcsd_data$rating)
ratings_dist <- mcsd_data %>%
group_by(rating) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
View(ratings_dist)
ratings_dist <- ratings_dist %>%
mutate(percent = percent(proportion)) %>% # use percent() from the scales package formats the proportions as a character with a "%"
select(rating, percent, count) # choose and reorder columns
View(ratings_dist)
ggplot(mcsd_data, aes(x = score)) +
geom_histogram(binwidth = 2, color = "white") +
labs(title = "MCSD 2015-16 Distribution of Ratings") +
theme_minimal()
retention_dist <- mcsd_data %>%
group_by(rating) %>%
summarise(percent_retained = percent(sum(retained)/n()))
View(retention_dist)
experience_and_performance <- lm(mcsd_data$score ~ mcsd_data$experience)
summary(experience_and_performance)
ggplot(mcsd_data, aes(x = experience, y = score)) +
geom_point() +
geom_jitter(alpha = .3) +
geom_smooth(method = "lm", formula = y~x) +
labs(x = "Years of Teaching Experience", y = "Performance Evaluation Score") +
theme_light()
ggplot(mcsd_data, aes(x = degree, y = score)) +
geom_boxplot() +
labs(x = "Highest Degree Earned", y = "Performance Evaluation Score")
career_experience <- mcsd_data %>%
group_by(experience) %>%
filter (experience <=10 | experience > 10)
ggplot(career_experience, aes(rating, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_density(career_experience, aes(score))
ggplot(career_experience, aes(rating, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
library(pacman)
p_load(dplyr, tidyr, readr, stringr, ggplot2, knitr, scales)
ggplot(mcsd_data, aes(x = salary, y = score, col = rating)) +
geom_point() +
geom_smooth() +
labs(x = "Salary", y = "Performance Evaluation Score", legend = "Evaluation Rating") +
scale_color_manual(values= c("#034772", "#2888BC", "#73B7CE", "#699D46", "#EA8936"))
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
opts_chunk$set(dev = "png", fig.width = 9, fig.height = 5.5, dpi = 300) # control image sizes
opts_chunk$set(size = "small", background = "white")
opts_chunk$set(highlight = TRUE, comment = NA, tidy = FALSE)
opts_chunk$set(knitr.table.format = "html")
mcsd_data <- read_csv("Module 2 Data FINAL.csv") %>%
mutate(rating = factor(rating,
levels = c("Ineffective",
"Minimally Effective",
"Developing",
"Proficient",
"Highly Effective")))
---
title: "Metro City School District Compensation Analysis"
author: "Analyst at TNTP"
date: "`r format(Sys.time(), '%B %d, %Y')`" # embeds the date the file was last updated
output:
word_document:
reference_docx: tntp-style-file.docx
toc: no
---
This is **an R Markdown document**. Markdown allows you to make tables and figures directly from your code, rather than copying and pasting them into a Word document. It's the ultimate level of reproducability, as you'll never have to check if the numbers were copied correctly.
Hit the "Knit Word" button above to see how this document can easily turn into a simple document.
When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. In other words, you can have the knitted document show your results (like a table or graph) *and* your code if you want.
Below, we have chunked off your analysis for you and given you suggestions and hints for writing the code that will create the table and graphs called for.
Ready to get started? Good! Because we want to make this look somewhat like a memo, delete all of this intro text above the first Markdown chunk (but keep the header text between the "---"s at the very top) and add your names to the header as the author.
```{r packages, include = FALSE}
# Load basic packages
library(pacman)
p_load(dplyr, tidyr, readr, stringr, ggplot2, knitr, scales)
### The official TNTP colors are:
### dark_blue = "#034772", medium_blue = "#2888BC", light_blue = "#73B7CE", green = "#699D46", orange = "#EA8936",
### gold = "#F9C347", dark_gray = "#58595B", medium_gray = "#7D7E81", light_gray = "#C1C2C4"
```
```{r set_knitr_defaults, include = FALSE}
# This sets default options for each knitr chunk, to save typing them over and over. You can ignore for now, and override in any given chunk if desired.
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
opts_chunk$set(dev = "png", fig.width = 9, fig.height = 5.5, dpi = 300) # control image sizes
opts_chunk$set(size = "small", background = "white")
opts_chunk$set(highlight = TRUE, comment = NA, tidy = FALSE)
opts_chunk$set(knitr.table.format = "html")
```
```{r import, include = FALSE}
# Read in data and order the rating variable from worst to best rating.
mcsd_data <- read_csv("Module 2 Data FINAL.csv") %>%
mutate(rating = factor(rating,
levels = c("Ineffective",
"Minimally Effective",
"Developing",
"Proficient",
"Highly Effective")))
career_experience <- mcsd_data %>%
group_by(experience) %>%
filter (experience <=10 | experience > 10)
ggplot(career_experience, aes(rating, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_density(career_experience, aes(score))
ggplot(career_experience, aes(rating, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_jitter() +
labs(title = "MCSD:Compensation and Performance based on teaching experience")
ggplot(career_experience, aes(score, salary, color=experience)) +
geom_density(career_experience, aes(score))
mcsd_data_early_and_career <- mcsd_data %>%
mutate(exp_cat_group = ifelse(exp_cat == "New" | exp_cat == "Novice", "Early Career Teacher",
ifelse(exp_cat == "Experienced" | exp_cat == "Career", "Late Career Teacher", NA))) %>%
filter(!is.na(exp_cat_group))
ggplot(mcsd_data_early_and_career, aes(salary, fill = exp_cat_group, color = exp_cat_group)) +
geom_density(alpha = .5, color = "white") +
scale_fill_manual(values = c("#2888BC", "#7D7E81")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Salary", y = "")
ggplot(mcsd_data_early_and_career, aes(score, fill = exp_cat_group, color = exp_cat_group)) +
geom_density(alpha = .5, color = "white") +
scale_fill_manual(values = c("#2888BC", "#7D7E81")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Teacher Evaluation Score", y = "")
ggplot(mcsd_data_early_and_career, aes(salary, fill = exp_cat_group, color = exp_cat_group)) +
geom_density(alpha = .5, color = "white") +
scale_fill_manual(values = c("#2888BC", "#7D7E81")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Salary", y = "")
str(career_experience)
ggplot(mcsd_data_early_and_career, aes(score, fill = exp_cat_group, color = exp_cat_group)) +
geom_density(alpha = .5, color = "white") +
scale_fill_manual(values = c("#2888BC", "#7D7E81")) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x = "Teacher Evaluation Score", y = "")
